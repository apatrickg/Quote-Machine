{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apatrickg/Desktop/quote-machine/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotesDB: [],\n      quote: '',\n      author: ''\n    };\n    this.retrieveQuote = this.retrieveQuote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://gist.githubusercontent.com/apatrickg/de7a7fae9ab4bd94d7965d01ca253f21/raw/5da320eaa183f3047bbd55cf3d1c36a3847ebd66/quotes.json').then(response => response.json()).then(response => {\n      this.setState({\n        quotesDB: response.quotes\n      }, () => {\n        this.retrieveQuote();\n      });\n    }).catch(error => console.log('error'));\n  }\n\n  retrieveQuote() {\n    if (this.state.quotesDB.length > 0) {\n      let random = Math.floor(Math.random() * this.state.quotesDB.length);\n      let randomized = this.state.quotesDB[random];\n      this.state.quotesDB.splice(random, 1);\n      this.setState({\n        quote: randomized.quote,\n        author: randomized.author\n      });\n    } else {\n      alert('You have reached the end. Please refresh the page.');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quote-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quote for Your Thoughts?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"text\",\n        children: this.state.quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"author\",\n        children: this.state.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"new-quote\",\n        onClick: this.retrieveQuote,\n        children: \"New Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/apatrickg/Desktop/quote-machine/src/App.js"],"names":["React","App","Component","constructor","props","state","quotesDB","quote","author","retrieveQuote","bind","componentDidMount","fetch","then","response","json","setState","quotes","catch","error","console","log","length","random","Math","floor","randomized","splice","alert","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAQ,WAAR;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAiC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAC,EADE;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAKA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,KAAK,CAAC,wIAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMC,QAAQ,IAAI;AAChB,WAAKE,QAAL,CAAc;AACZV,QAAAA,QAAQ,EAAEQ,QAAQ,CAACG;AADP,OAAd,EAEG,MAAM;AACP,aAAKR,aAAL;AACD,OAJD;AAKD,KARD,EASCS,KATD,CASOC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAThB;AAUD;;AAEDZ,EAAAA,aAAa,GAAE;AACb,QAAI,KAAKJ,KAAL,CAAWC,QAAX,CAAoBgB,MAApB,GAA6B,CAAjC,EAAoC;AAClC,UAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,KAAKlB,KAAL,CAAWC,QAAX,CAAoBgB,MAA/C,CAAb;AACA,UAAII,UAAU,GAAG,KAAKrB,KAAL,CAAWC,QAAX,CAAoBiB,MAApB,CAAjB;AACA,WAAKlB,KAAL,CAAWC,QAAX,CAAoBqB,MAApB,CAA2BJ,MAA3B,EAAkC,CAAlC;AAEA,WAAKP,QAAL,CAAc;AACZT,QAAAA,KAAK,EAAEmB,UAAU,CAACnB,KADN;AAEZC,QAAAA,MAAM,EAAEkB,UAAU,CAAClB;AAFP,OAAd;AAGG,KARL,MASI;AACFoB,MAAAA,KAAK,CAAC,oDAAD,CAAL;AACD;AACF;;AAGDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,EAAE,EAAC,MAAN;AAAA,kBAAc,KAAKxB,KAAL,CAAWE;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,EAAE,EAAC,QAAN;AAAA,kBAAgB,KAAKF,KAAL,CAAWG;AAA3B;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAQ,QAAA,EAAE,EAAC,WAAX;AAAuB,QAAA,OAAO,EAAE,KAAKC,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAlD8B;;AAqDjC,eAAeR,GAAf","sourcesContent":["import React from 'react';\nimport  './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      quotesDB:[],\n      quote: '',\n      author: ''\n    }\n    this.retrieveQuote = this.retrieveQuote.bind(this)\n  }\n\n  componentDidMount(){\n    fetch('https://gist.githubusercontent.com/apatrickg/de7a7fae9ab4bd94d7965d01ca253f21/raw/5da320eaa183f3047bbd55cf3d1c36a3847ebd66/quotes.json')\n    .then(response => response.json())\n    .then(response => {\n      this.setState({\n        quotesDB: response.quotes\n      }, () => {\n        this.retrieveQuote()\n      })\n    })\n    .catch(error => console.log('error'))\n  }\n\n  retrieveQuote(){\n    if (this.state.quotesDB.length > 0 ){\n      let random = Math.floor(Math.random() * this.state.quotesDB.length)\n      let randomized = this.state.quotesDB[random]\n      this.state.quotesDB.splice(random,1)\n\n      this.setState({\n        quote: randomized.quote,\n        author: randomized.author\n      })} \n    else{\n      alert('You have reached the end. Please refresh the page.')\n    }\n  }\n\n\n  render (){\n    return (\n      <div id=\"quote-box\">\n        <h1>Quote for Your Thoughts?</h1>\n        <p id=\"text\">{this.state.quote}</p>\n        <p id=\"author\">{this.state.author}</p>\n        <button id=\"new-quote\" onClick={this.retrieveQuote}>New Quote</button>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}